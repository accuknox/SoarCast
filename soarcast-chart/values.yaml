celery:

  name: celery

  labels:
    app: celery

  imagePullSecrets:
  - name: imagepull

  celeryWorker:
   
    image:
      repository: 956994857092.dkr.ecr.us-west-2.amazonaws.com/soarcast-test
      tag: ""
      pullPolicy: Always

    command:
    - celery
    - -A
    - mission
    - worker
    - --loglevel=INFO

    volumeMounts:
    - name: app-config
      mountPath: /mnt/appconfig.json
      subPath: appconfig.json

    Resources:
      limits:
        cpu: "1000m"
        memory: "500Mi"
      requests:
        cpu: "500m"
        memory: "250Mi"      


  celeryBeat:
   
    image:
      repository: 956994857092.dkr.ecr.us-west-2.amazonaws.com/soarcast-test
      tag: ""
      pullPolicy: Always

    command: 
    - celery
    - -A
    - divy
    - beat
    - --loglevel=INFO

    volumeMounts:
    - name: app-config
      mountPath: /mnt/appconfig.json
      subPath: appconfig.json 

    Resources:
      limits:
        cpu: "1000m"
        memory: "500Mi"
      requests:
        cpu: "500m"
        memory: "250Mi"
  
  secretFiles:
    enabled: true
    name: app-config
    type: generic
    filePath: "secretfiles/dev/celery/appconfig.json" 

  strategy: {}

  volumes:
  - name: app-config
    secret:
      secretName: app-config
  
  nodeSelector: {}
    

uwsgi:
  
  name: uwsgi

  labels: 
     app: uwsgi
  
  imagePullSecrets:
  - name: imagepull

  image:
    repository: 956994857092.dkr.ecr.us-west-2.amazonaws.com/soarcast-test
    tag: ""
    pullPolicy: Always
   
  workingDir: /app

  containerPort: 8000 
    
  volumes:
  - name: staticfiles
    persistentVolumeClaim:
      claimName: soarcast-staticfiles
  - name: appconfig
    secret:
      secretName: appconfig
 
  volumeMounts:
  - name: staticfiles
    mountPath: /app/staticfiles
  - name: app-config
    mountPath: /mnt/appconfig.json
    subPath: appconfig.json
 
  Resources:
    limits:
      cpu: "1000m"
      memory: "500Mi"
    requests:
      cpu: "500m"
      memory: "250Mi"

  service:
    name: uwsgi
    ports:
    - port: 8000
      targetPort: 8000
      protocol: TCP
      
  strategy: {}
  
  secretFiles:
    enabled: true
    name: appconfig
    type: generic
    filePath: "secretfiles/dev/uwsgi/appconfig.json"


externalServices:
- enabled: true
  name: redis
  type: ExternalName
  externalName: master.soarcast-elasticache.ocgv53.use2.cache.amazonaws.com

- enabled: true
  name: redis-worker
  type: ExternalName
  externalName: master.soarcast-elasticache.ocgv53.use2.cache.amazonaws.com

- enabled: true
  name: postgres
  type: ExternalName
  externalName: divy.cluster-c29nmrml3fh6.us-east-2.rds.amazonaws.com

- enabled: true
  name: postgres-worker
  type: ExternalName
  externalName: divy.cluster-c29nmrml3fh6.us-east-2.rds.amazonaws.com

- enabled: true
  name: aurora
  type: ExternalName
  externalName: 


namespace: test-soarcast

#pv and pvc enable
pv:
  name: soarcast-staticfiles
  enabled: true
  
pvspec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete
  storageClassName: efs-sc
  csi:
    driver: efs.csi.aws.com
    volumeHandle: fs-0b754ad8f5f03dc4b #use same efs as divy-staticfiles pv

pvcspec:
  accessModes:
    - ReadWriteOnce
  storageClassName: efs-sc
  resources:
    requests:
      storage: 1Gi